name: CI pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  ci:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-node@v3
        with:
          node-version: 20

      - name: Install deps
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Lint code
        run: npm run lint

      - name: Build frontend bundle
        run: npm run build

      - name: Run unit & component tests
        run: npm test

      - name: Run Playwright end-to-end tests
        run: PORT=8080 npm run test:e2e

  deploy:
    needs: ci
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push' || github.event_name == 'workflow_dispatch'

    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-node@v3
        with:
          node-version: 20

      - name: Install flyctl
        run: |
          curl -L https://fly.io/install.sh | sh
          echo "$HOME/.fly/bin" >> $GITHUB_PATH

      - name: Authenticate Fly.io
        run: flyctl auth token ${{ secrets.FLY_API_TOKEN }}

      - name: Deploy to Fly.io
        run: flyctl deploy --remote-only

  version:
  needs: deploy
  runs-on: ubuntu-latest
  if: github.ref == 'refs/heads/main' && github.event_name == 'push'

  steps:
    - uses: actions/checkout@v3

    - name: Set Git user
      run: |
        git config --global user.email "ci@example.com"
        git config --global user.name "CI Bot"

    - name: Get latest version
      id: get_tag
      run: |
        git fetch --tags
        latest=$(git tag | grep -E '^v[0-9]+$' | sort -V | tail -n1)
        echo "Latest tag: $latest"
        if [ -z "$latest" ]; then
          echo "next_tag=v1" >> $GITHUB_OUTPUT
        else
          next=$((${latest#v} + 1))
          echo "next_tag=v$next" >> $GITHUB_OUTPUT
        fi

    - name: Create tag
      run: |
        git tag ${{ steps.get_tag.outputs.next_tag }}
        git push origin ${{ steps.get_tag.outputs.next_tag }}

