name: CI pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  ci:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-node@v3
        with:
          node-version: 20

      - name: Install deps
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Lint code
        run: npm run lint

      - name: Build frontend bundle
        run: npm run build

      - name: Run unit & component tests
        run: npm test

      - name: Run Playwright end-to-end tests
        run: PORT=8080 npm run test:e2e

  deploy:
    needs: ci
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push' || github.event_name == 'workflow_dispatch'

    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-node@v3
        with:
          node-version: 20

      - name: Install flyctl
        run: |
          curl -L https://fly.io/install.sh | sh
          echo "$HOME/.fly/bin" >> $GITHUB_PATH

      - name: Authenticate Fly.io
        run: flyctl auth token ${{ secrets.FLY_API_TOKEN }}

      - name: Deploy to Fly.io
        run: flyctl deploy --remote-only

  version:
    needs: deploy
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - uses: actions/checkout@v3

      - name: Configure Git user
        run: |
          git config --global user.email "ci@example.com"
          git config --global user.name  "CI Bot"

      - name: Determine next version tag
        id: version
        run: |
          git fetch --tags
          latest=$(git tag --list 'v[0-9]*' | sort -V | tail -n1)
          if [ -z "$latest" ]; then
            next=v1
          else
            num=${latest#v}
            next="v$(( num + 1 ))"
          fi
          echo "next_tag=$next" >> "$GITHUB_OUTPUT"

      - name: Create and push git tag
        run: |
          git tag "${{ steps.version.outputs.next_tag }}"
          git push origin "${{ steps.version.outputs.next_tag }}"

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.version.outputs.next_tag }}
          name: Release ${{ steps.version.outputs.next_tag }}
          body: |
            Automated release after CI/CD pipeline completed.
            Commit: ${{ github.sha }}
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}